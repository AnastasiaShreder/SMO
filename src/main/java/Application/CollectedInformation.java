package Application;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
//import java.util.stream.Collectors;

public class CollectedInformation {
    private int countSources;
    private int bufferSize;
    private int countDevices;
    private Request request;
    private List<SourceData> sourcesData = new ArrayList<>();
    private List<DeviceData> devicesData = new ArrayList<>();
    private List<Snapshot> snapshots = new ArrayList<>();
    private Snapshot snapshot;

    public CollectedInformation(int countSources, int bufferSize, int countDevices) {
        this.countSources = countSources;
        this.bufferSize = bufferSize;
        this.countDevices = countDevices;
        this.snapshot = new Snapshot(countSources, bufferSize, countDevices);
    }

public void collectData(List<Request> completedRequests, List<Request> rejectedRequests,
                        List<Double> serviceTimes, double allServiceTime){
    for (int i = 0; i < countSources; i++){
        int I = i;
        List<Request> sourceCompletedRequests = completedRequests.stream()
                .filter(x -> x.getSourcePriority() == I)
                .collect(Collectors.toList());
        List<Request> sourceRejectedRequests = rejectedRequests.stream()
                .filter(x -> x.getSourcePriority() == I)
                .collect(Collectors.toList());

        sourcesData.add(new SourceData(i, sourceCompletedRequests, sourceRejectedRequests));
    }
    for (int i = 0; i < countDevices; i++) {
        devicesData.add(new DeviceData(serviceTimes.get(i), allServiceTime, i));
    }
}

    public List<SourceData> getSourcesData() {
        return sourcesData;
    }
    public List<Snapshot> getSnapshots() {
        return snapshots;
    }
    public List<DeviceData> getDevicesData() {
        return devicesData;
    }

    public void setSourceGeneratedRequest(int sourcePriority, int numRequest, double currentTime) {
        Snapshot newSnapshot = new Snapshot(snapshot);
        newSnapshot.setCurrentTime(currentTime);
        newSnapshot.setSourceAction(sourcePriority, String.valueOf(numRequest));
        newSnapshot.setStepAction("Request№" + numRequest + " was generated by Source№" + sourcePriority + " in " + currentTime);
        snapshots.add(newSnapshot);
        snapshot = newSnapshot;
        System.out.println(snapshot.getStepAction());
    }

    public void setBufferAcceptedRequest(int positionBuffer, int requestPriority, int numRequest, double currentTime) {
        Snapshot newSnapshot = new Snapshot(snapshot);
        newSnapshot.setCurrentTime(currentTime);
        newSnapshot.setBufferAction(positionBuffer, String.valueOf(numRequest), String.valueOf(requestPriority));
        newSnapshot.setStepAction("Request№" + numRequest + " from Source№" + requestPriority + " was accepted by Buffer on "
                + positionBuffer + " in " + currentTime);
        snapshots.add(newSnapshot);
        snapshot = newSnapshot;
        System.out.println(snapshot.getStepAction());
    }

    public void setBufferRejectedRequest(int requestPriority, int numRequest, double currentTime) {
        Snapshot newSnapshot = new Snapshot(snapshot);
        newSnapshot.setCurrentTime(currentTime);
        newSnapshot.setBufferAction(0, "Free", "Null");
        newSnapshot.setStepAction("Request№" + numRequest + " with priority " + requestPriority + " was rejected "
                + " in " + currentTime);
        snapshots.add(newSnapshot);
        snapshot = newSnapshot;
        System.out.println(snapshot.getStepAction());
    }

    public void setDeviceAcceptedRequest(int numDevice, int requestPriority, int numRequest, int positionBuffer, double currentTime) {
        Snapshot newSnapshot = new Snapshot(snapshot);
        newSnapshot.setCurrentTime(currentTime);
        newSnapshot.setDeviceAction(numDevice, String.valueOf(numRequest), String.valueOf(requestPriority));
        newSnapshot.setStepAction("Request№" + numRequest + " with priority "
                + requestPriority + " was sent to device№" + numDevice + " in " + currentTime);
        newSnapshot.deleteRequestFromBuffer(positionBuffer);
        snapshots.add(newSnapshot);
        snapshot = newSnapshot;
    }

    public void setDeviceReleasedRequest(int numDevice, int numRequest, double currentTime) {
        Snapshot newSnapshot = new Snapshot(snapshot);
        newSnapshot.setCurrentTime(currentTime);
        newSnapshot.setDeviceAction(numDevice, "Free", "Null");
        newSnapshot.setStepAction("Request№" + numRequest + " was processed by device№" + numDevice + " in " + currentTime);
        snapshots.add(newSnapshot);
        snapshot = newSnapshot;
        System.out.println(snapshot.getStepAction());
    }
}
